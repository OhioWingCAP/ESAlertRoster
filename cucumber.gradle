import groovyx.gpars.GParsPool
import net.masterthought.cucumber.ReportBuilder
import org.apache.tools.ant.taskdefs.condition.Os

import java.awt.*
import java.util.List

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'

buildscript {
    repositories {
       mavenCentral()
    }
    dependencies {
        classpath 'org.codehaus.gpars:gpars:1.2.1',
                "net.masterthought:cucumber-reporting:0.4.0"
    }
}

repositories {
    mavenCentral()
}

ext.env = System.getenv();
ext.cukesVersion = '1.2.4'
ext.cucumberArgs = ''
ext.testProperties = "-DEnvironment=" + System.getProperty("Environment")
ext.buildNumber = env.BUILD_NUMBER == 'null' ? 'N/A' : env.BUILD_NUMBER;


dependencies {

    compile group: 'net.masterthought', name: 'cucumber-reporting', version: "0.4.0"
    compile group: 'info.cukes', name: 'cucumber-junit', version: "$cukesVersion"
    compile group: 'info.cukes', name: 'cucumber-core', version: "$cukesVersion"
    compile group: 'info.cukes', name: 'cucumber-java', version: "$cukesVersion"
    compile 'info.cukes:gherkin:2.12.2',
            'info.cukes:cucumber-jvm-deps:1.0.5'

    compile(
            "org.codehaus.groovy:groovy-all:2.2.0"
    )

    compile files("$buildDir/classes/main")
}

task runInParallel(dependsOn: ['cleanCucumber', 'compileTestJava']) {
    doLast {
        runCucumberTests("--tags ~@ignored")
    }
}

def runCucumberTests(cucumberArgs) {
    delete("build/reports", "screenshots")
    def features = fileTree(dir: "${project.projectDir}/src/test/cucumber/").include '**/*.feature'
    try {
        GParsPool.withPool(5) {
            features.eachParallel { File file ->
                cukeIndividualFile(file, cucumberArgs)
            }
        }
    } finally {
        generateReport()
    }
}

task runInSequence(dependsOn: ['compileTestJava']) {
    doLast {
        delete("build/reports", "/screenshots")
        def arglist = ["-p", "pretty", "-p", "json:${reporting.baseDir}/cucumber/cucumber.json", "--glue", "classpath:gov.cap.ohwg.es.alertroster.cucumber.steps",
                       "${project.projectDir}/src/test/cucumber/"]

        return javaexec {
            main = "cucumber.api.cli.Main"
            classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
            args = arglist
            jvmArgs = ["-DEnvironment=${System.getProperty('Environment')}", "-DBROWSER=${System.getProperty('BROWSER')}"]
        }
    }
}

def generateReport() {
    def jsonReports = fileTree(dir: "${reporting.baseDir}/cucumber/").include '**/*.json'.toString()
    File reportOutputDirectory = new File("${reporting.baseDir}/cucumber");

    List<String> jsonReportFiles = new ArrayList<String>();
    jsonReports.each { File file ->
        jsonReportFiles.add("${reporting.baseDir}/cucumber/${file.name}".toString());
    }
    ReportBuilder reportBuilder = new ReportBuilder(
            jsonReportFiles,              // List<String> jsonReports,
            reportOutputDirectory,        // File reportDirectory
            "",                           // String pluginUrlPath
            buildNumber,                  // String buildNumber
            "ES Alert Roster",            // String buildProject,
            false,                        // boolean skippedFails,
            false,                        // boolean pendingFails,
            true,                         // boolean undefinedFails,
            false,                        // boolean missingFails
            false,                        // boolean flashCharts,
            true,                         // boolean runWithJenkins,
            false,                        // boolean artifactsEnabled,
            "",                           // String artifactConfig
            true,                         // boolean highCharts
            true                          // boolean parallelTesting
    );
    reportBuilder.generateReports();
}

task generateReport {
    generateReport()
}

task cucumber << {
    try {
        tasks.runInParallel.execute()
    } finally {
        Desktop.desktop.browse file(reporting.baseDir.absolutePath + '/cucumber/feature-overview.html').toURI()
    }
}

def cukeIndividualFile(File file, String cucumberArgs) {
    def executablePath
    File.createTempFile("cucumber", ".sh").with {
        write "mkdir -p ${reporting.baseDir}/cucumber \n"
        write "java ${testProperties} " +
                "-cp ${sourceSets.test.runtimeClasspath.asPath} " +
                "cucumber.api.cli.Main " +
                "--glue classpath:gov.cap.ohwg.es.alertroster.cucumber.steps " +
                file.absolutePath + " " +
                "--plugin json:${reporting.baseDir}/cucumber/${file.name}.json " +
                "--plugin pretty " + //> ${reporting.baseDir}/cucumber/${file.name}.log
                "${cucumberArgs}"
        executablePath = absolutePath
    }
    println("Executing ${executablePath}")
    exec {
        executable Os.isFamily(Os.FAMILY_WINDOWS) ? "cmd" : "sh"
        args executablePath
    }

}

task cuke(dependsOn: ['compileTestJava']) << {
    try {
        delete("build/reports", "screenshots")
        def cukeFile = file(file)
        cukeIndividualFile(cukeFile, "--tags ~@ignored " + cucumberArgs)
    } catch (Exception e) {
        e.printStackTrace()
        System.err.println "cuke - runs cucumber tests on a single file"
        System.err.println "  Usage: cuke -Pfile=path/to/cuke/file.feature"
        System.err.println "  Optional parameters:  -DEnvironment=[Local,Dev,QA] (Local is default) "
        System.err.println "                        -DBROWSER=[chrome,phantomjs] (phantomjs is default) "
    }
}

